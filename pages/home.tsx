import Link from "next/link";
import { useEffect, useState } from "react";
import { app, database } from "../firebaseConfig";
import { collection, getDocs, doc, updateDoc } from "firebase/firestore";
import { useRouter } from "next/router";
import { getAuth } from "firebase/auth";
import { MuiNavbar } from "../layouts/components/MuiNavbar";
import Button from "@mui/material/Button";
import Stack from "@mui/material/Stack";
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import Grid from "@material-ui/core/Grid";
import Head from "next/head";
// import { Search } from "./Search";
import { Cardpost } from "../layouts/Cardpost";
import Avatar from "@mui/material/Avatar";

export default function Home() {
  const [ID, setID] = useState(null);
  const [title, setTitle] = useState<string>("");
  const [context, setContext] = useState<string>("");
  const [name, setName] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [categori, setCategori] = useState<string>("");
  const [firedata, setFiredata] = useState([]);
  const [createtime, setCreatetime] = useState("");
  const [isUpdate, setIsUpdate] = useState<boolean>(false);
  const databaseRef = collection(database, "CRUD DATA");
  const [displayname, setDisplayName] = useState<string>("");
  const [createObjectURL, setCreateObjectURL] = useState<string>(null);
  const [downloadURL, setDownloadURL] = useState<string>(null);
  const [image, setImage] = useState<string>("");
  const [result, setResult] = useState<string>("");
  const [photoURL, setPhotoURL] = useState<string>("");
  const [likecount, setLikecount] = useState<number>(null);
  const [userid, setUserid] = useState<string>(null);
  const [netabare, setNetabare] = useState<string>("");
  const [opentext, setOpentext] = useState<boolean>(false);
  const styles = { whiteSpace: "pre-line" };

  let router = useRouter();
  const auth = getAuth();
  const user = auth.currentUser;

  useEffect(() => {
    getData();
  }, []);

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFiredata(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const getID = (
    id,
    name,
    title,
    context,
    downloadURL,
    categori,
    cratetime,
    displayname,
    netabare,
    photoURL,
    userid,
    likecount
  ) => {
    setID(id);
    setContext(context);
    setTitle(title);
    setName(name);
    setDisplayName(displayname);
    setDownloadURL(downloadURL);
    setIsUpdate(true);
    setCategori(categori);
    setCreatetime(cratetime);
    setNetabare(netabare);
    setPhotoURL(photoURL);
    setUserid(userid);
    console.log(title);
  };

  const updatefields = () => {
    let fieldToEdit = doc(database, "CRUD DATA", ID);
    updateDoc(fieldToEdit, {
      title: title,
      context: context.replace(/\r?\n/g, "\n"),
    })
      .then(() => {
        alert("記事を更新しました");
        setContext("");
        setTitle("");
        setIsUpdate(false);
        getData();
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const Opentext = () => {
    if (opentext == false) {
      setOpentext(true);
    } else {
      setOpentext(false);
    }
  };

  // const likecount = (setLikecount) => {
  //   let fieldToEdit = doc(database, "CRUD DATA", ID);
  //   updateDoc(fieldToEdit, {
  //     likecount: setLikecount,
  //   })
  //     .then(() => {
  //       alert("いいねしました");
  //       getData();
  //     })
  //     .catch((err) => {
  //       console.log(err);
  //     });
  // };

  return (
    <div>
      <Head>
        <title>漫画考察.net/ホーム画面</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MuiNavbar />
      <br></br>
      <div className="max-w-7xl m-auto">
        <br></br>
        <br></br>
        <p className="text-center">
          <img src="./images/book-reading.png" className="w-40 m-auto my-6" />
        </p>
        <h2 className="m-5 text-2xl font-semibold text-center">漫画考察.net</h2>
        <p className="m-5 text-center">
          漫画考察.netでは、漫画の考察などを自由に投稿・閲覧できるwebサイトです。
        </p>
        <br></br>

        <div className="lg:text-right text-center">
          <Button variant="outlined" className="">
            <Link href="/post">新規投稿をする</Link>
          </Button>
        </div>
        <h2 className="m-5 my-12 text-center text-2xl font-semibold">
          新規投稿
        </h2>
        <p className="text-1xl text-center">投稿数　{firedata.length}件</p>

        <Grid container spacing={1}>
          {firedata.map((data) => {
            return (
              <Cardpost
                key={data.id}
                downloadURL={data.downloadURL}
                title={data.title}
                categori={data.categori}
                netabare={data.netabare}
                context={data.context}
                createtime={data.createtime}
                displayname={data.displayname}
                email={data.email}
                id={data.id}
                photoURL={data.photoURL}
                // likecount={likecount}
              />
            );
          })}
        </Grid>

        <br></br>
        <br></br>
        {isUpdate && (
          <Box
            component="form"
            sx={{
              "& > :not(style)": { m: 1, width: "25ch" },
            }}
            noValidate
            autoComplete="off"
          >
            <TextField
              id="outlined-basic"
              label="タイトル（最大20文字)"
              variant="outlined"
              type="text"
              value={title}
              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                setTitle(event.target.value)
              }
            />

            <br></br>

            <TextField
              label="内容(最大500文字）"
              className="m-auto w-full"
              id="filled-multiline-static"
              multiline
              rows={14}
              type="text"
              value={context}
              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                setContext(event.target.value)
              }
            />
            <Button variant="outlined" onClick={updatefields}>
              更新する
            </Button>
            <br></br>
          </Box>
        )}
      </div>
    </div>
  );
}
