import React from "react";
import Link from "next/link";
import { useEffect, useState } from "react";
import { database } from "../../firebaseConfig.js";
import { collection, addDoc } from "firebase/firestore";
import { useRouter } from "next/router";
import { getAuth } from "firebase/auth";
import { MuiNavbar } from "../../packages/components/MuiNavbar";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import { postImage } from "../api/upload";
import Radio from "@mui/material/Radio";
import RadioGroup from "@mui/material/RadioGroup";
import FormControlLabel from "@mui/material/FormControlLabel";
import FormControl from "@mui/material/FormControl";
import FormLabel from "@mui/material/FormLabel";
import Head from "next/head";
import moment from "moment";
import "moment/locale/ja";
import Imageupload from "../../packages/utils/Imageupload";

export default function Post() {
  const [ID, setID] = useState(null);
  const [title, setTitle] = useState("");
  const [context, setContext] = useState("");
  const [name, setName] = useState("");
  const [categori, setCategori] = useState("");
  const [firedata, setFiredata] = useState([]);
  const [isUpdate, setIsUpdate] = useState(false);
  const databaseRef = collection(database, "CRUD DATA");
  const [image, setImage] = useState(null);
  const [createObjectURL, setCreateObjectURL] = useState(null);
  const [downloadURL, setDownloadURL] = useState(null);
  const [uploadResult, setUploadResultL] = useState(null);
  const [userid, setUserid] = useState(null);
  const [result, setResult] = useState("");
  const [netabare, setNetabare] = useState("");
  const [photoURL, setPhotoURL] = useState("");

  const uploadToClient = (event) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];

      setImage(file);
      setCreateObjectURL(URL.createObjectURL(file));
    }
  };

  let router = useRouter();
  const auth = getAuth();
  const user = auth.currentUser;

  console.log(setContext);

  type addDate = {
    toLocaleString(timeZone): string;
  };

  const addDate = async () => {
    if (image == null) {
      alert("サムネイルを選んでください");
    } else {
      const result = await postImage(image);
      // const newdate = new Date().toLocaleString({ timeZone: "Asia/Tokyo" });
      const newdate = new Date().toLocaleString("ja-JP");
      setResult(result);
      // console.log(downloadURL);
      addDoc(databaseRef, {
        title: title,
        context: context.replace(/\r?\n/g, "\n"),
        downloadURL: result,
        email: user.email,
        displayname: user.displayName,
        categori: categori,
        createtime: newdate,
        netabare: netabare,
        photoURL: user.photoURL,
        userid: user.uid,
      })
        .then(() => {
          alert("記事投稿ができました。");
          setTitle("");
          setContext("");
          setCategori("");
          setNetabare("");
          setPhotoURL("");
          setUserid("");
          router.push("/home");
        })
        .catch((err) => {
          console.error(err);
        });
    }
  };

  return (
    <div>
      <Head>
        <title>漫画考察.net/記事投稿</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MuiNavbar />
      <div className="max-w-7xl m-auto">
        <h2 className="m-5 my-12 text-center text-2xl font-semibold">
          考察記事の投稿
        </h2>
        <Box
          component="form"
          sx={{
            "& > :not(style)": { m: 1, width: "50ch" },
          }}
          className="flex justify-center max-w-7xl "
          // Validate
          autoComplete="off"
        >
          <div>
            <Imageupload
              onChange={uploadToClient}
              createObjectURL={createObjectURL}
              text={""}
              event={undefined}
            />

            <TextField
              id="outlined-basic"
              label="タイトル*（最大20文字)"
              variant="outlined"
              value={title}
              helperText="タイトルを入力してください"
              className="m-auto w-full"
              onChange={(event) => {
                if (event.target.value.length <= 20) {
                  setTitle(event.target.value);
                }
              }}
            />
            <br></br>
            <FormLabel id="demo-radio-buttons-group-label">作品名*</FormLabel>
            <RadioGroup
              aria-labelledby="demo-radio-buttons-group-label"
              name="radio-buttons-group"
            >
              <FormControlLabel
                value="ONE PIECE"
                control={<Radio />}
                label="ONE PIECE"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setCategori(event.target.value)
                }
              />
              <FormControlLabel
                value="呪術廻戦"
                control={<Radio />}
                label="呪術廻戦"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setCategori(event.target.value)
                }
              />
              <FormControlLabel
                value="東京リベンジャーズ"
                control={<Radio />}
                label="東京リベンジャーズ"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setCategori(event.target.value)
                }
              />
              <FormControlLabel
                value="キングダム"
                control={<Radio />}
                label="キングダム"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setCategori(event.target.value)
                }
              />
            </RadioGroup>
            <FormLabel id="demo-radio-buttons-group-label">
              ネタバレについて*
            </FormLabel>

            <RadioGroup
              aria-labelledby="demo-radio-buttons-group-label"
              name="radio-buttons-group"
            >
              <FormControlLabel
                value="ネタバレ有"
                control={<Radio />}
                label="ネタバレ有(漫画・アニメよりも先行している内容の場合）"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setNetabare(event.target.value)
                }
              />
              <FormControlLabel
                value="ネタバレ無"
                control={<Radio />}
                label="ネタバレ無"
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setNetabare(event.target.value)
                }
              />
            </RadioGroup>
            {}
            <TextField
              label="内容*(最大500文字）"
              className="m-auto w-full"
              id="filled-multiline-static"
              multiline
              rows={14}
              value={context}
              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
                if (event.target.value.length <= 500) {
                  setContext(event.target.value);
                }
              }}
            />
            <br></br>
            <br></br>
            <div className="text-center">
              <Button
                variant="outlined"
                onClick={addDate}
                className="text-center m-auto my-10"
              >
                投稿する
              </Button>
            </div>
          </div>
        </Box>
      </div>
    </div>
  );
}
