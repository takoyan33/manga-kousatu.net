import React from "react";
import { useEffect, useState } from "react";
import Link from "next/link";
import { app, database } from "../../../firebaseConfig.js";
import { collection, getDocs } from "firebase/firestore";
import { useRouter } from "next/router";
import { getAuth, updateProfile } from "firebase/auth";
import { MuiNavbar } from "../../../layouts/components/MuiNavbar";
import Button from "@mui/material/Button";
import Stack from "@mui/material/Stack";
import { postImage } from "../../api/upload";
import Box from "@mui/material/Box";
import TextField from "@mui/material/TextField";
import Head from "next/head";

import Image from "react-image-resizer";

export default function Photoedit() {
  const [image, setImage] = useState<string>();
  const [result, setResult] = useState("");
  let router = useRouter();
  const databaseRef = collection(database, "CRUD DATA");
  const [createObjectURL, setCreateObjectURL] = useState<string>(null);
  const [downloadURL, setDownloadURL] = useState<string>(null);
  const [firedata, setFiredata] = useState([]);
  const auth = getAuth();
  const user = auth.currentUser;

  console.log(user);
  useEffect(() => {
    let token = sessionStorage.getItem("Token");

    if (token) {
      getData();
    }
    if (!token) {
      router.push("/register");
    }
  }, []);

  const getData = async () => {
    await getDocs(databaseRef).then((response) => {
      setFiredata(
        response.docs.map((data) => {
          return { ...data.data(), id: data.id };
        })
      );
    });
  };

  const uploadToClient = (event) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];

      setImage(file);
      setCreateObjectURL(URL.createObjectURL(file));
    }
  };

  const updatename = async () => {
    const result = await postImage(image);
    setResult(result);
    updateProfile(auth.currentUser, {
      photoURL: result,
    })
      .then(() => {
        alert("プロフィールを更新しました。");
        setResult("");
        router.push("/profile");
      })
      .catch((error) => {
        console.log(error);
      });
  };

  return (
    <div>
      <Head>
        <title>漫画考察.net/プロフィール編集</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MuiNavbar />

      <h2 className="m-5">プロフィール画像の編集</h2>

      <p className="m-5">
        現在のユーザー画像
        {user && (
          <Image
            className="m-auto text-center max-w-sm"
            height={100}
            width={100}
            src={user.photoURL}
          />
        )}
      </p>

      <Box
        component="form"
        sx={{
          "& > :not(style)": { m: 1, width: "25ch" },
        }}
        noValidate
        autoComplete="off"
      >
        <br></br>
        <img
          className="flex justify-center items-center m-auto  w-full"
          src={createObjectURL}
        />
        <label
          htmlFor="file-input"
          className="bg-primary-900 text-white-900 dark:bg-dark-900 flex justify-center items-center px-4 py-2 rounded mb-6 w-full"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-10 w-10 hover:cursor-pointer hover:bg-gray-700"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth="2"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
            />
          </svg>
        </label>
        <input
          id="file-input"
          className="hidden"
          type="file"
          accept="image/*"
          name="myImage"
          onChange={uploadToClient}
        />
      </Box>
      <br></br>
      <Button variant="outlined" className="m-5" onClick={updatename}>
        画像を更新する
      </Button>
      <br></br>
      <Button variant="outlined" className="m-5">
        <Link href="/profile">戻る</Link>
      </Button>
    </div>
  );
}
